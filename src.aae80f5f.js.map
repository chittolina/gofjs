{"version":3,"sources":["lib/algorithms.js","GameOfLife.js","index.js"],"names":["mapDimensions","mapConstraints","getNeighbors","x","y","getNewCellState","currentState","neighbors","nearbyLivingCells","filter","neighbor","length","newState","getNewState","currentMapState","Array","fill","map","i","j","currentCellState","newCellState","setMapDimensions","createBoard","dimensions","random","board","value","Math","round","GameOfLife","interval","element","timer","setInterval","tick","running","clearInterval","pause","currentGeneration","updateBoard","clear","ctx","canvas","getContext","clearRect","width","height","xFactor","yFactor","fillStyle","fillRect","document","getElementById","innerHTML","event","rect","getBoundingClientRect","clientX","left","clientY","top","scaledX","floor","scaledY","container","querySelector","createElement","appendChild","canvasWidth","canvasHeight","addEventListener","onCellClick","startButton","pauseButton","clearButton","randomButton","gameOfLife","start"],"mappings":";AA6KA,aAAA,SAAA,EAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,wDAAA,SAAA,EAAA,EAAA,GAAA,GAAA,OAAA,YAAA,OAAA,IAAA,uBAAA,OAAA,UAAA,SAAA,KAAA,GAAA,CAAA,IAAA,EAAA,GAAA,GAAA,EAAA,GAAA,EAAA,OAAA,EAAA,IAAA,IAAA,IAAA,EAAA,EAAA,EAAA,OAAA,cAAA,GAAA,EAAA,EAAA,QAAA,QAAA,EAAA,KAAA,EAAA,QAAA,GAAA,EAAA,SAAA,GAAA,GAAA,IAAA,MAAA,GAAA,GAAA,EAAA,EAAA,EAAA,QAAA,IAAA,GAAA,MAAA,EAAA,QAAA,EAAA,SAAA,QAAA,GAAA,EAAA,MAAA,GAAA,OAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,iBAAA,QAAA,gBAAA,QAAA,YAAA,QAAA,aAAA,QAAA,iBAAA,EAvKA,IAAIA,EAAgB,GAGhBC,EAAiB,GAQfC,EAAe,SAACC,EAAGC,GAGnBD,OAAK,GAALA,GAAe,GAALC,EACL,CACL,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,IAIJD,GAAKF,EAAe,IAAW,GAALG,EACrB,CACL,CAACH,EAAe,GAAK,EAAG,GACxB,CAACA,EAAe,GAAK,EAAG,GACxB,CAACA,EAAe,GAAI,IAIf,GAALE,GAAUC,GAAKH,EAAe,GACzB,CACL,CAAC,EAAGA,EAAe,GAAK,GACxB,CAAC,EAAGA,EAAe,GAAK,GACxB,CAAC,EAAGA,EAAe,KAInBE,GAAKF,EAAe,IAAMG,GAAKH,EAAe,GACzC,CACL,CAACA,EAAe,GAAK,EAAGA,EAAe,IACvC,CAACA,EAAe,GAAK,EAAGA,EAAe,GAAK,GAC5C,CAACA,EAAe,GAAIA,EAAe,GAAK,IAMnC,GAALE,EACK,CACL,CAACA,EAAGC,EAAI,GACR,CAACD,EAAI,EAAGC,EAAI,GACZ,CAACD,EAAI,EAAGC,GACR,CAACD,EAAI,EAAGC,EAAI,GACZ,CAACD,EAAGC,EAAI,IAIRD,GAAKF,EAAe,GACf,CACL,CAACE,EAAGC,EAAI,GACR,CAACD,EAAI,EAAGC,EAAI,GACZ,CAACD,EAAI,EAAGC,GACR,CAACD,EAAI,EAAGC,EAAI,GACZ,CAACD,EAAGC,EAAI,IAIRA,GAAKH,EAAe,GACf,CACL,CAACE,EAAI,EAAGC,GACR,CAACD,EAAI,EAAGC,EAAI,GACZ,CAACD,EAAGC,EAAI,GACR,CAACD,EAAI,EAAGC,EAAI,GACZ,CAACD,EAAI,EAAGC,IAIH,GAALA,EACK,CACL,CAACD,EAAI,EAAG,GACR,CAACA,EAAI,EAAGC,EAAI,GACZ,CAACD,EAAGC,EAAI,GACR,CAACD,EAAI,EAAGC,EAAI,GACZ,CAACD,EAAI,EAAGC,IAKL,CACL,CAACD,EAAI,EAAGC,GACR,CAACD,EAAI,EAAGC,EAAI,GACZ,CAACD,EAAI,EAAGC,EAAI,GACZ,CAACD,EAAI,EAAGC,GACR,CAACD,EAAI,EAAGC,EAAI,GACZ,CAACD,EAAI,EAAGC,EAAI,GACZ,CAACD,EAAGC,EAAI,GACR,CAACD,EAAGC,EAAI,KAsEZ,QAAA,aAAA,EA5DA,IAAMC,EAAkB,SAACC,GAAcC,IAC/BC,GAD2C,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,IACbC,OAAO,SAAAC,GAAYA,OAAa,IAAbA,IAAgBC,OACnEC,EAAWN,EAcRM,OAZa,GAAhBN,GAA2C,IAAtBE,IACvBI,EAAW,GAEQ,IAAjBN,IACwB,IAAtBE,GAAiD,IAAtBA,IAC7BI,EAAW,IAETJ,EAAoB,GAAKA,EAAoB,KAC/CI,EAAW,IAIRA,GA4CT,QAAA,gBAAA,EApCA,IAAMC,EAAc,SAAAC,GAKb,IAJCF,IAAAA,EAAWG,MAAMf,EAAc,IAClCgB,OACAC,IAAI,WAAMF,OAAAA,MAAMf,EAAc,IAAIgB,KAAK,KAEjCE,EAAI,EAAGA,EAAIN,EAASD,OAAQO,IAC9B,IAAA,IAAIC,EAAI,EAAGA,EAAIP,EAAS,GAAGD,OAAQQ,IAAK,CACrCZ,IAAAA,EAAYL,EAAagB,EAAGC,GAAGF,IACnC,SAAA,GAAA,IAAA,EAAA,EAAA,EAAA,GAAEd,EAAF,EAAA,GAAKC,EAAL,EAAA,GAAYU,OAAAA,EAAgBX,GAAGC,KAE3BgB,EAAmBN,EAAgBI,GAAGC,GACtCE,EAAehB,EAAgBe,EAAkBb,GAEvDK,EAASM,GAAGC,GAAKE,EAIdT,OAAAA,GAmBT,QAAA,YAAA,EAXA,IAAMU,EAAmB,SAACnB,EAAGC,GAE3BH,EAAiB,EADjBD,EAAgB,CAACG,EAAGC,IACY,GAAK,EAAGJ,EAAc,GAAK,IAS7D,QAAA,iBAAA,EAAA,IAAMuB,EAAc,SAAiD,GAG9D,IAHgBC,IAAAA,EAAAA,EAAAA,WAA8C,EAAA,EAAzB,OAAA,IAAA,EAAA,GAAyB,EAAA,GAAjCrB,EAAiC,EAAA,GAA9BC,EAA8B,EAAA,GAArBqB,EAAAA,EAAAA,OAAAA,OAAS,IAAA,GAAY,EAC/DC,EAAQ,GAEHR,EAAI,EAAGA,EAAIf,EAAGe,IAAK,CAC1BQ,EAAMR,GAAK,GACN,IAAA,IAAIC,EAAI,EAAGA,EAAIf,EAAGe,IAAK,CACpBQ,IAAAA,EAAQF,EAASG,KAAKC,MAAMD,KAAKH,UAAY,EACnDC,EAAMR,GAAGC,GAAKQ,GAIXD,OAAAA,GAXT,QAAA,YAAA;;ACnIE,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EA1CF,IAAA,EAAA,QAAA,oBA0CE,SAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,mDAAA,SAAA,EAAA,GAAA,GAAA,OAAA,YAAA,OAAA,IAAA,uBAAA,OAAA,UAAA,SAAA,KAAA,GAAA,OAAA,MAAA,KAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,CAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,EAAA,QAAA,EAAA,EAAA,OAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,GAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,KAAA,EAAA,OAAA,eAAA,EAAA,EAAA,CAAA,MAAA,EAAA,YAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,GAAA,EAAA,EAxCmBI,IAAAA,EAQnB,SAA+C,EAAA,GAAA,IAAA,EAAA,KAAjCN,EAAAA,EAAAA,WAAYO,EAAAA,EAAAA,SAAUC,EAAAA,EAAAA,QAAW,EAAA,KAAA,GAmCvC,EAAA,KAAA,QAAA,WACD,EAAKC,QACR,EAAKA,MAAQC,YAAY,EAAKC,KAAM,EAAKJ,UACzC,EAAKK,SAAU,KAOX,EAAA,KAAA,QAAA,WACNC,cAAc,EAAKJ,OACnB,EAAKA,MAAQ,KACb,EAAKG,SAAU,IAMT,EAAA,KAAA,QAAA,WACN,EAAKE,QACL,EAAKhC,cAAe,EAAY,EAAA,aAAA,CAC9BkB,WAAY,CAAC,EAAKA,WAAW,GAAI,EAAKA,WAAW,MAEnD,EAAKe,kBAAoB,EACzB,EAAKC,gBAME,EAAA,KAAA,SAAA,WACP,EAAKC,QACL,EAAKnC,cAAe,EAAY,EAAA,aAAA,CAC9BkB,WAAY,CAAC,EAAKA,WAAW,GAAI,EAAKA,WAAW,IACjDC,QAAQ,IAEV,EAAKc,kBAAoB,EACzB,EAAKC,gBAMA,EAAA,KAAA,OAAA,WACC5B,IAAAA,GAAW,EAAY,EAAA,aAAA,EAAKN,cAClC,EAAKA,aAAeM,EACpB,EAAK2B,oBAEL,EAAKC,gBAMO,EAAA,KAAA,cAAA,WACNE,IAAAA,EAAM,EAAKC,OAAOC,WAAW,MACnCF,EAAIG,UAAU,EAAG,EAAG,EAAKF,OAAOG,MAAO,EAAKH,OAAOI,QAG9C,IADGzC,IAAAA,EAAsD,EAAtDA,aAAciC,EAAwC,EAAxCA,kBAAmBS,EAAqB,EAArBA,QAASC,EAAY,EAAZA,QACzC/B,EAAI,EAAGA,EAAIZ,EAAaK,OAAQO,IAClC,IAAA,IAAIC,EAAI,EAAGA,EAAIb,EAAa,GAAGK,OAAQQ,IACf,IAAvBb,EAAaY,GAAGC,IAClBuB,EAAIQ,UAAY,UAChBR,EAAIS,SAASjC,EAAI8B,EAAS7B,EAAI8B,EAASD,EAASC,KAEhDP,EAAIQ,UAAY,UAChBR,EAAIS,SAASjC,EAAI8B,EAAS7B,EAAI8B,EAASD,EAASC,IAKtDG,SAASC,eAAe,cAAcC,UAAYf,IAQtC,EAAA,KAAA,cAAA,SAAAgB,GACR,IAAA,EAAKnB,QAAL,CAIEoB,IAAAA,EAAO,EAAKb,OAAOc,wBAEnBtD,EAAIoD,EAAMG,QAAUF,EAAKG,KACzBvD,EAAImD,EAAMK,QAAUJ,EAAKK,IAEzBC,EAAUlC,KAAKmC,MAAM5D,EAAI,EAAK6C,SAC9BgB,EAAUpC,KAAKmC,MAAM3D,EAAI,EAAK6C,SAE9BrC,EAAe,EAAA,EAAKN,cAC1BM,EAASkD,GAASE,GAAW,EAAIpD,EAASkD,GAASE,GAEnD,EAAK1D,aAAeM,EACpB,EAAK4B,iBAnIAhB,KAAAA,WAAaA,EACbO,KAAAA,SAAWA,EACXE,KAAAA,MAAQ,KAERG,KAAAA,SAAU,EACV9B,KAAAA,cAAe,EAAY,EAAA,aAAA,CAC9BkB,WAAY,CAACA,EAAW,GAAIA,EAAW,MAEpCe,KAAAA,kBAAoB,EAEpB0B,KAAAA,UAAYb,SAASc,cAAclC,GACnCW,KAAAA,OAASS,SAASe,cAAc,UAChCF,KAAAA,UAAUG,YAAY,KAAKzB,QAC3B0B,KAAAA,YAAc,IACdC,KAAAA,aAAe,IAGftB,KAAAA,QAAU,KAAKqB,YAAc7C,EAAW,GACxCyB,KAAAA,QAAU,KAAKqB,aAAe9C,EAAW,GAEzCmB,KAAAA,OAAOG,MAAQ,KAAKuB,YACpB1B,KAAAA,OAAOI,OAAS,KAAKuB,aAErB3B,KAAAA,OAAO4B,iBAAiB,QAAS,KAAKC,cAE1BhD,EAAAA,EAAAA,kBAAAA,EAAW,GAAIA,EAAW,IAEtCC,KAAAA,SACAe,KAAAA,eAGP,QAAA,QAAA;;ACxCF,aAFA,IAAA,EAAA,EAAA,QAAA,iBAEA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAAY,SAASmB,iBAAiB,mBAAoB,WACtCE,IAAAA,EAAcrB,SAASC,eAAe,SACtCqB,EAActB,SAASC,eAAe,SACtCsB,EAAcvB,SAASC,eAAe,SACtCuB,EAAexB,SAASC,eAAe,UAEvCwB,EAAa,IAAI/C,EAAJ,QAAe,CAChCN,WAAY,CAAC,IAAK,KAClBO,SAAU,GACVC,QAAS,WAGXyC,EAAYF,iBAAiB,QAASM,EAAWC,OACjDJ,EAAYH,iBAAiB,QAASM,EAAWvC,OACjDqC,EAAYJ,iBAAiB,QAASM,EAAWpC,OACjDmC,EAAaL,iBAAiB,QAASM,EAAWpD","file":"src.aae80f5f.js","sourceRoot":"../src","sourcesContent":["/**\n *  Algorithms module. Contains algorithms used to implement the game created by John Horton Conway.\n * @module src/lib/algorithms\n */\n\n/** @const {Array<number>} */\nlet mapDimensions = []\n\n/** @const {Array<number>} */\nlet mapConstraints = []\n\n/**\n * Gets the neighbors for the given x and y position\n * @param {number} x The x coordinate\n * @param {number} y The y coordinate\n * @return {Array<Array<number>>} An array with the found neighbors positions\n */\nconst getNeighbors = (x, y) => {\n  // 1. Corner cases\n  // 1.1 Bottom left corner\n  if (x == 0 && y == 0) {\n    return [\n      [0, 1],\n      [1, 1],\n      [1, 0],\n    ]\n  }\n  // 1.2 Bottom right corner\n  if (x == mapConstraints[0] && y == 0) {\n    return [\n      [mapConstraints[0] - 1, 0],\n      [mapConstraints[0] - 1, 1],\n      [mapConstraints[0], 1],\n    ]\n  }\n  // 1.3 Top left corner\n  if (x == 0 && y == mapConstraints[1]) {\n    return [\n      [0, mapConstraints[1] - 1],\n      [1, mapConstraints[1] - 1],\n      [1, mapConstraints[1]],\n    ]\n  }\n  // 1.4 Top right corner\n  if (x == mapConstraints[0] && y == mapConstraints[1]) {\n    return [\n      [mapConstraints[0] - 1, mapConstraints[1]],\n      [mapConstraints[0] - 1, mapConstraints[1] - 1],\n      [mapConstraints[0], mapConstraints[1] - 1],\n    ]\n  }\n\n  // 2. Handle extreme left, right, top and bottom cells\n  // 2.1 Left\n  if (x == 0) {\n    return [\n      [x, y - 1],\n      [x + 1, y - 1],\n      [x + 1, y],\n      [x + 1, y + 1],\n      [x, y + 1],\n    ]\n  }\n  // 2.2 Right\n  if (x == mapConstraints[0]) {\n    return [\n      [x, y - 1],\n      [x - 1, y - 1],\n      [x - 1, y],\n      [x - 1, y + 1],\n      [x, y + 1],\n    ]\n  }\n  // 2.3 Top\n  if (y == mapConstraints[1]) {\n    return [\n      [x + 1, y],\n      [x + 1, y - 1],\n      [x, y - 1],\n      [x - 1, y - 1],\n      [x - 1, y],\n    ]\n  }\n  // 2.4 Bottom\n  if (y == 0) {\n    return [\n      [x - 1, 0],\n      [x - 1, y + 1],\n      [x, y + 1],\n      [x + 1, y + 1],\n      [x + 1, y],\n    ]\n  }\n\n  // 3. Generic case\n  return [\n    [x - 1, y],\n    [x - 1, y + 1],\n    [x - 1, y - 1],\n    [x + 1, y],\n    [x + 1, y + 1],\n    [x + 1, y - 1],\n    [x, y + 1],\n    [x, y - 1],\n  ]\n}\n\n/**\n * Gets the new cell state\n * @param {number} currentState The current cell state. \"0\" for dead and \"1\" for alive\n * @param {Array<number>} neighbors An array with the current neighbors states\n * @return {number} The new cell state.\n */\nconst getNewCellState = (currentState, neighbors = []) => {\n  const nearbyLivingCells = neighbors.filter(neighbor => neighbor === 1).length\n  let newState = currentState\n\n  if (currentState == 0 && nearbyLivingCells === 3) {\n    newState = 1\n  }\n  if (currentState === 1) {\n    if (nearbyLivingCells === 2 || nearbyLivingCells === 3) {\n      newState = 1\n    }\n    if (nearbyLivingCells < 2 || nearbyLivingCells > 3) {\n      newState = 0\n    }\n  }\n\n  return newState\n}\n\n/**\n * Gets the new map state\n * @param {Array<Array<number>>} currentMapState The current map state\n * @return {Array<Array<number>>} The new map state\n */\nconst getNewState = currentMapState => {\n  const newState = Array(mapDimensions[0])\n    .fill()\n    .map(() => Array(mapDimensions[1]).fill(0))\n\n  for (let i = 0; i < newState.length; i++) {\n    for (let j = 0; j < newState[0].length; j++) {\n      const neighbors = getNeighbors(i, j).map(\n        ([x, y]) => currentMapState[x][y],\n      )\n      const currentCellState = currentMapState[i][j]\n      const newCellState = getNewCellState(currentCellState, neighbors)\n\n      newState[i][j] = newCellState\n    }\n  }\n\n  return newState\n}\n\n/**\n * Sets the dimensions used on the algorithms\n * @param {number} x The x coordinate\n * @param {number} y The y coordinate\n */\nconst setMapDimensions = (x, y) => {\n  mapDimensions = [x, y]\n  mapConstraints = [mapDimensions[0] - 1, mapDimensions[1] - 1]\n}\n\n/**\n * Creates a new board\n * @param {Array<Array<number>>} currentMapState The current map state\n * @param {boolean} random Whether to generate random values or not\n * @return {Array<Array<number>>} The new map state\n */\nconst createBoard = ({ dimensions: [x, y] = [], random = false }) => {\n  let board = []\n\n  for (let i = 0; i < x; i++) {\n    board[i] = []\n    for (let j = 0; j < y; j++) {\n      const value = random ? Math.round(Math.random()) : 0\n      board[i][j] = value\n    }\n  }\n\n  return board\n}\n\nexport {\n  createBoard,\n  getNeighbors,\n  getNewState,\n  getNewCellState,\n  setMapDimensions,\n}\n","import { createBoard, getNewState, setMapDimensions } from './lib/algorithms'\n\nexport default class GameOfLife {\n  /**\n   * Creates a new board of GameOfLife\n   * @param {Object} params Parameters object\n   * @param {Array<Array>} params.dimensions The map dimensions\n   * @param {number} params.interval The interval between generations\n   * @param {string} params.element The query selector of the element to use as a container for the board\n   */\n  constructor({ dimensions, interval, element }) {\n    this.dimensions = dimensions\n    this.interval = interval\n    this.timer = null\n\n    this.running = false\n    this.currentState = createBoard({\n      dimensions: [dimensions[0], dimensions[1]],\n    })\n    this.currentGeneration = 0\n\n    this.container = document.querySelector(element)\n    this.canvas = document.createElement('canvas')\n    this.container.appendChild(this.canvas)\n    this.canvasWidth = 1000\n    this.canvasHeight = 1000\n\n    // Factors used to scale the given dimensions to the canvas size\n    this.xFactor = this.canvasWidth / dimensions[0]\n    this.yFactor = this.canvasHeight / dimensions[1]\n\n    this.canvas.width = this.canvasWidth\n    this.canvas.height = this.canvasHeight\n\n    this.canvas.addEventListener('click', this.onCellClick)\n\n    setMapDimensions(dimensions[0], dimensions[1])\n\n    this.random()\n    this.updateBoard()\n  }\n\n  /**\n   * Starts the game\n   */\n  start = () => {\n    if (!this.timer) {\n      this.timer = setInterval(this.tick, this.interval)\n      this.running = true\n    }\n  }\n\n  /**\n   * Pauses the game\n   */\n  pause = () => {\n    clearInterval(this.timer)\n    this.timer = null\n    this.running = false\n  }\n\n  /**\n   * Pauses the game and clears the map\n   */\n  clear = () => {\n    this.pause()\n    this.currentState = createBoard({\n      dimensions: [this.dimensions[0], this.dimensions[1]],\n    })\n    this.currentGeneration = 0\n    this.updateBoard()\n  }\n\n  /**\n   * Generates a random pattern on the map\n   */\n  random = () => {\n    this.clear()\n    this.currentState = createBoard({\n      dimensions: [this.dimensions[0], this.dimensions[1]],\n      random: true,\n    })\n    this.currentGeneration = 0\n    this.updateBoard()\n  }\n\n  /**\n   * Ticks the game (gets the next generation and updates the map)\n   */\n  tick = () => {\n    const newState = getNewState(this.currentState)\n    this.currentState = newState\n    this.currentGeneration++\n\n    this.updateBoard()\n  }\n\n  /**\n   * Updates the board accordingly to the current state\n   */\n  updateBoard = () => {\n    const ctx = this.canvas.getContext('2d')\n    ctx.clearRect(0, 0, this.canvas.width, this.canvas.height)\n\n    const { currentState, currentGeneration, xFactor, yFactor } = this\n    for (let i = 0; i < currentState.length; i++) {\n      for (let j = 0; j < currentState[0].length; j++) {\n        if (currentState[i][j] === 1) {\n          ctx.fillStyle = '#581845'\n          ctx.fillRect(i * xFactor, j * yFactor, xFactor, yFactor)\n        } else {\n          ctx.fillStyle = '#900C3F'\n          ctx.fillRect(i * xFactor, j * yFactor, xFactor, yFactor)\n        }\n      }\n    }\n\n    document.getElementById('generation').innerHTML = currentGeneration\n  }\n\n  /**\n   * Callback called to update the board after clicking on a cell.\n   * If the game is currently running this method has no effect.\n   * @param event The click event\n   */\n  onCellClick = event => {\n    if (this.running) {\n      return\n    }\n\n    const rect = this.canvas.getBoundingClientRect()\n\n    const x = event.clientX - rect.left\n    const y = event.clientY - rect.top\n\n    const scaledX = Math.floor(x / this.xFactor)\n    const scaledY = Math.floor(y / this.yFactor)\n\n    const newState = [...this.currentState]\n    newState[scaledX][scaledY] = 1 - newState[scaledX][scaledY]\n\n    this.currentState = newState\n    this.updateBoard()\n  }\n}\n","import GameOfLife from './GameOfLife'\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const startButton = document.getElementById('start')\n  const pauseButton = document.getElementById('pause')\n  const clearButton = document.getElementById('clear')\n  const randomButton = document.getElementById('random')\n\n  const gameOfLife = new GameOfLife({\n    dimensions: [100, 100],\n    interval: 10,\n    element: '#board',\n  })\n\n  startButton.addEventListener('click', gameOfLife.start)\n  pauseButton.addEventListener('click', gameOfLife.pause)\n  clearButton.addEventListener('click', gameOfLife.clear)\n  randomButton.addEventListener('click', gameOfLife.random)\n})\n"]}